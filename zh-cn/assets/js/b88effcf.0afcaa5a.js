"use strict";(self.webpackChunkrushstack_io=self.webpackChunkrushstack_io||[]).push([[6472],{5242:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var i=n(3929);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),h=p(n),d=r,f=h["".concat(l,".").concat(d)]||h[d]||u[d]||s;return n?i.createElement(f,a(a({ref:t},c),{},{components:n})):i.createElement(f,a({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,a=new Array(s);a[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,a[1]=o;for(var p=2;p<s;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9646:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var i=n(394),r=n(1614),s=(n(3929),n(5242)),a=["components"],o={title:"Heft \u547d\u4ee4\u884c"},l=void 0,p={unversionedId:"pages/heft/cli",id:"pages/heft/cli",title:"Heft \u547d\u4ee4\u884c",description:"heft",source:"@site/i18n/zh-cn/docusaurus-plugin-content-docs/current/pages/heft/cli.md",sourceDirName:"pages/heft",slug:"/pages/heft/cli",permalink:"/zh-cn/pages/heft/cli",editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/rushstack.io/docs/pages/heft/cli.md",tags:[],version:"current",frontMatter:{title:"Heft \u547d\u4ee4\u884c"},sidebar:"docsSidebar",previous:{title:"\u4f7f\u7528 rig",permalink:"/zh-cn/pages/heft/rig_packages"},next:{title:"\u5f00\u59cb\u4f7f\u7528 Heft",permalink:"/zh-cn/pages/heft_tutorials/getting_started"}},c={},u=[{value:"heft",id:"heft",level:2},{value:"heft clean",id:"heft-clean",level:2},{value:"heft build",id:"heft-build",level:2},{value:"heft start",id:"heft-start",level:2},{value:"heft test",id:"heft-test",level:2}],h={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,a);return(0,s.kt)("wrapper",(0,i.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"heft"},"heft"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'usage: heft [-h] [--unmanaged] [-d] [--plugin PATH] <command> ...\n\nHeft is a pluggable build system designed for web projects.\n\nPositional arguments:\n  <command>\n    clean        Clean the project\n    build        Build the project.\n    start        Run the local server for the current project\n    test         Build the project and run tests.\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  --unmanaged    Disables the Heft version selector: When Heft is invoked via\n                 the shell path, normally it will examine the project\'s\n                 package.json dependencies and try to use the locally\n                 installed version of Heft. Specify "--unmanaged" to force\n                 the invoked version of Heft to be used. This is useful for\n                 example if you want to test a different version of Heft.\n  -d, --debug    Show the full call stack if an error occurs while executing\n                 the tool\n  --plugin PATH  Used to specify Heft plugins.\n\nFor detailed help about a specific command, use: heft <command> -h\n\n')),(0,s.kt)("h2",{id:"heft-clean"},"heft clean"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"usage: heft clean [-h] [-v] [--clear-cache]\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --verbose  If specified, log information useful for debugging.\n  --clear-cache  If this flag is provided, the compiler cache will also be\n                 cleared. This isn't dangerous, but may lead to longer\n                 compile times\n")),(0,s.kt)("h2",{id:"heft-build"},"heft build"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"usage: heft build [-h] [-v] [--production] [--locale LOCALE] [-l]\n                  [--typescript-max-write-parallelism PARALLEILSM]\n                  [--max-old-space-size SIZE] [--watch] [--clean]\n\n\nOptional arguments:\n  -h, --help            Show this help message and exit.\n  -v, --verbose         If specified, log information useful for debugging.\n  --production          If specified, build ship/production output\n  --locale LOCALE       Only build the specified locale, if applicable.\n  -l, --lite            Perform a minimal build, skipping optional steps like\n                        linting.\n  --typescript-max-write-parallelism PARALLEILSM\n                        Set this to change the maximum write parallelism.\n                        This parameter overrides what is set in typescript.\n                        json. The default is 50.\n  --max-old-space-size SIZE\n                        Used to specify the max old space size.\n  --watch               If provided, run tests in watch mode.\n  --clean               If specified, clean the package before building.\n")),(0,s.kt)("h2",{id:"heft-start"},"heft start"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"usage: heft start [-h] [-v] [--production] [--locale LOCALE] [-l]\n                  [--typescript-max-write-parallelism PARALLEILSM]\n                  [--max-old-space-size SIZE] [--clean]\n\n\nOptional arguments:\n  -h, --help            Show this help message and exit.\n  -v, --verbose         If specified, log information useful for debugging.\n  --production          If specified, build ship/production output\n  --locale LOCALE       Only build the specified locale, if applicable.\n  -l, --lite            Perform a minimal build, skipping optional steps like\n                        linting.\n  --typescript-max-write-parallelism PARALLEILSM\n                        Set this to change the maximum write parallelism.\n                        This parameter overrides what is set in typescript.\n                        json. The default is 50.\n  --max-old-space-size SIZE\n                        Used to specify the max old space size.\n  --clean               If specified, clean the package before starting the\n                        development server.\n")),(0,s.kt)("h2",{id:"heft-test"},"heft test"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'usage: heft test [-h] [-v] [--production] [--locale LOCALE] [-l]\n                 [--typescript-max-write-parallelism PARALLEILSM]\n                 [--max-old-space-size SIZE] [--watch] [--clean] [--no-test]\n                 [--no-build] [-u] [--find-related-tests SOURCE_FILE]\n                 [--silent] [-t REGEXP] [--test-path-pattern REGEXP]\n                 [--test-timeout-ms INTEGER] [--debug-heft-reporter]\n\n\nOptional arguments:\n  -h, --help            Show this help message and exit.\n  -v, --verbose         If specified, log information useful for debugging.\n  --production          If specified, build ship/production output\n  --locale LOCALE       Only build the specified locale, if applicable.\n  -l, --lite            Perform a minimal build, skipping optional steps like\n                        linting.\n  --typescript-max-write-parallelism PARALLEILSM\n                        Set this to change the maximum write parallelism.\n                        This parameter overrides what is set in typescript.\n                        json. The default is 50.\n  --max-old-space-size SIZE\n                        Used to specify the max old space size.\n  --watch               If provided, run tests in watch mode.\n  --clean               If specified, clean the package before building.\n  --no-test             If specified, run the build without testing.\n  --no-build            If provided, only run tests. Do not build first.\n  -u, --update-snapshots\n                        Update Jest snapshots while running the tests. This\n                        corresponds to the "--updateSnapshots" parameter in\n                        Jest\n  --find-related-tests SOURCE_FILE\n                        Find and run the tests that cover a space separated\n                        list of source files that were passed in as arguments.\n                         This corresponds to the "--findRelatedTests"\n                        parameter in Jest\'s documentation.\n  --silent              Prevent tests from printing messages through the\n                        console. This corresponds to the "--silent" parameter\n                        in Jest\'s documentation.\n  -t REGEXP, --test-name-pattern REGEXP\n                        Run only tests with a name that matches a regular\n                        expression. The REGEXP is matched against the full\n                        name, which is a combination of the test name and all\n                        its surrounding describe blocks. This corresponds to\n                        the "--testNamePattern" parameter in Jest\'s\n                        documentation.\n  --test-path-pattern REGEXP\n                        Run only tests with a source file path that matches a\n                        regular expression. On Windows you will need to use\n                        "/" instead of "" This corresponds to the\n                        "--testPathPattern" parameter in Jest\'s documentation.\n  --test-timeout-ms INTEGER\n                        Change the default timeout for tests; if a test\n                        doesn\'t complete within this many milliseconds, it\n                        will fail. Individual tests can override the default.\n                        If unspecified, the default is normally 5000 ms. This\n                        corresponds to the "--testTimeout" parameter in\n                        Jest\'s documentation.\n  --debug-heft-reporter\n                        Normally Heft installs a custom Jest reporter so that\n                        test results are presented consistently with other\n                        task logging. If you suspect a problem with the\n                        HeftJestReporter, specify "--debug-heft-reporter" to\n                        temporarily disable it so that you can compare with\n                        how Jest\'s default reporter would have presented it.\n                        Include this output in your bug report. Do not use\n                        "--debug-heft-reporter" in production.\n')))}d.isMDXComponent=!0}}]);