"use strict";(self.webpackChunkrushstack_io=self.webpackChunkrushstack_io||[]).push([[7420],{158:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var i=n(6393);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),h=p(n),u=a,f=h["".concat(l,".").concat(u)]||h[u]||d[u]||r;return n?i.createElement(f,s(s({ref:t},c),{},{components:n})):i.createElement(f,s({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<r;p++)s[p]=n[p];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6519:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var i=n(216),a=(n(6393),n(158));const r={title:"Heft command line"},s=void 0,o={unversionedId:"pages/heft/cli",id:"pages/heft/cli",title:"Heft command line",description:"heft",source:"@site/docs/pages/heft/cli.md",sourceDirName:"pages/heft",slug:"/pages/heft/cli",permalink:"/pages/heft/cli",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/rushstack.io/docs/pages/heft/cli.md",tags:[],version:"current",frontMatter:{title:"Heft command line"},sidebar:"docsSidebar",previous:{title:"Using rig packages",permalink:"/pages/heft/rig_packages"},next:{title:"Getting started with Heft",permalink:"/pages/heft_tutorials/getting_started"}},l={},p=[{value:"heft",id:"heft",level:2},{value:"heft clean",id:"heft-clean",level:2},{value:"heft build",id:"heft-build",level:2},{value:"heft start",id:"heft-start",level:2},{value:"heft test",id:"heft-test",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"heft"},"heft"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'usage: heft [-h] [--unmanaged] [--debug] [--plugin PATH] <command> ...\n\nHeft is a pluggable build system designed for web projects.\n\nPositional arguments:\n  <command>\n    clean        Clean the project\n    build        Build the project.\n    start        Run the local server for the current project\n    test         Build the project and run tests.\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  --unmanaged    Disables the Heft version selector: When Heft is invoked via\n                 the shell path, normally it will examine the project\'s\n                 package.json dependencies and try to use the locally\n                 installed version of Heft. Specify "--unmanaged" to force\n                 the invoked version of Heft to be used. This is useful for\n                 example if you want to test a different version of Heft.\n  --debug        Show the full call stack if an error occurs while executing\n                 the tool\n  --plugin PATH  Used to specify Heft plugins.\n\nFor detailed help about a specific command, use: heft <command> -h\n\n')),(0,a.kt)("h2",{id:"heft-clean"},"heft clean"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"usage: heft clean [-h] [-v] [--clear-cache]\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --verbose  If specified, log information useful for debugging.\n  --clear-cache  If this flag is provided, the compiler cache will also be\n                 cleared. This isn't dangerous, but may lead to longer\n                 compile times\n")),(0,a.kt)("h2",{id:"heft-build"},"heft build"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"usage: heft build [-h] [-v] [--production] [--locale LOCALE] [-l]\n                  [--typescript-max-write-parallelism PARALLEILSM]\n                  [--max-old-space-size SIZE] [-w] [--clean]\n\n\nOptional arguments:\n  -h, --help            Show this help message and exit.\n  -v, --verbose         If specified, log information useful for debugging.\n  --production          If specified, build ship/production output\n  --locale LOCALE       Only build the specified locale, if applicable.\n  -l, --lite            Perform a minimal build, skipping optional steps like\n                        linting.\n  --typescript-max-write-parallelism PARALLEILSM\n                        Set this to change the maximum write parallelism.\n                        This parameter overrides what is set in typescript.\n                        json. The default is 50.\n  --max-old-space-size SIZE\n                        Used to specify the max old space size.\n  -w, --watch           If provided, run tests in watch mode.\n  --clean               If specified, clean the package before building.\n")),(0,a.kt)("h2",{id:"heft-start"},"heft start"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"usage: heft start [-h] [-v] [--production] [--locale LOCALE] [-l]\n                  [--typescript-max-write-parallelism PARALLEILSM]\n                  [--max-old-space-size SIZE] [--clean]\n\n\nOptional arguments:\n  -h, --help            Show this help message and exit.\n  -v, --verbose         If specified, log information useful for debugging.\n  --production          If specified, build ship/production output\n  --locale LOCALE       Only build the specified locale, if applicable.\n  -l, --lite            Perform a minimal build, skipping optional steps like\n                        linting.\n  --typescript-max-write-parallelism PARALLEILSM\n                        Set this to change the maximum write parallelism.\n                        This parameter overrides what is set in typescript.\n                        json. The default is 50.\n  --max-old-space-size SIZE\n                        Used to specify the max old space size.\n  --clean               If specified, clean the package before starting the\n                        development server.\n")),(0,a.kt)("h2",{id:"heft-test"},"heft test"),(0,a.kt)("p",null,"(Help is shown with ",(0,a.kt)("inlineCode",{parentName:"p"},"@rushstack/heft-jest-plugin")," configured.)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'usage: heft test [-h] [-v] [--production] [--locale LOCALE] [-l]\n                 [--typescript-max-write-parallelism PARALLEILSM]\n                 [--max-old-space-size SIZE] [-w] [--clean] [--no-test]\n                 [--no-build] [--config RELATIVE_PATH] [--debug-heft-reporter]\n                 [--detect-open-handles] [--disable-code-coverage]\n                 [--find-related-tests SOURCE_FILE]\n                 [--max-workers COUNT_OR_PERCENTAGE] [--silent] [-t REGEXP]\n                 [--test-path-pattern REGEXP] [--test-timeout-ms INTEGER] [-u]\n\n\nOptional arguments:\n  -h, --help            Show this help message and exit.\n  -v, --verbose         If specified, log information useful for debugging.\n  --production          If specified, build ship/production output\n  --locale LOCALE       Only build the specified locale, if applicable.\n  -l, --lite            Perform a minimal build, skipping optional steps like\n                        linting.\n  --typescript-max-write-parallelism PARALLEILSM\n                        Set this to change the maximum write parallelism.\n                        This parameter overrides what is set in typescript.\n                        json. The default is 50.\n  --max-old-space-size SIZE\n                        Used to specify the max old space size.\n  -w, --watch           If provided, run tests in watch mode.\n  --clean               If specified, clean the package before building.\n  --no-test             If specified, run the build without testing.\n  --no-build            If provided, only run tests. Do not build first.\n  --config RELATIVE_PATH\n                        Use this parameter to control which Jest\n                        configuration file will be used to run Jest tests. If\n                        not specified, it will default to "config/jest.config.\n                        json". This corresponds to the "--config" parameter\n                        in Jest\'s documentation.\n  --debug-heft-reporter\n                        Normally Heft installs a custom Jest reporter so that\n                        test results are presented consistently with other\n                        task logging. If you suspect a problem with the\n                        HeftJestReporter, specify "--debug-heft-reporter" to\n                        temporarily disable it so that you can compare with\n                        how Jest\'s default reporter would have presented it.\n                        Include this output in your bug report. Do not use\n                        "--debug-heft-reporter" in production.\n  --detect-open-handles\n                        Attempt to collect and print open handles preventing\n                        Jest from exiting cleanly. This option has a\n                        significant performance penalty and should only be\n                        used for debugging. This corresponds to the\n                        "--detectOpenHandles" parameter in Jest\'s\n                        documentation. This parameter may alternatively be\n                        specified via the HEFT_JEST_DETECT_OPEN_HANDLES\n                        environment variable.\n  --disable-code-coverage\n                        Disable any configured code coverage. If code\n                        coverage is not configured, this parameter has no\n                        effect. This parameter may alternatively be specified\n                        via the HEFT_JEST_DISABLE_CODE_COVERAGE environment\n                        variable.\n  --find-related-tests SOURCE_FILE\n                        Find and run the tests that cover a space separated\n                        list of source files that were passed in as arguments.\n                         This corresponds to the "--findRelatedTests"\n                        parameter in Jest\'s documentation.\n  --max-workers COUNT_OR_PERCENTAGE\n                        Use this parameter to control maximum number of\n                        worker processes tests are allowed to use. This\n                        parameter is similar to the parameter noted in the\n                        Jest documentation, and can either be an integer\n                        representing the number of workers to spawn when\n                        running tests, or can be a string representing a\n                        percentage of the available CPUs on the machine to\n                        utilize. Example values: "3", "25%" This parameter\n                        may alternatively be specified via the\n                        HEFT_JEST_MAX_WORKERS environment variable.\n  --silent              Prevent tests from printing messages through the\n                        console. This corresponds to the "--silent" parameter\n                        in Jest\'s documentation.\n  -t REGEXP, --test-name-pattern REGEXP\n                        Run only tests with a name that matches a regular\n                        expression. The REGEXP is matched against the full\n                        name, which is a combination of the test name and all\n                        its surrounding describe blocks. This corresponds to\n                        the "--testNamePattern" parameter in Jest\'s\n                        documentation.\n  --test-path-pattern REGEXP\n                        Run only tests with a source file path that matches a\n                        regular expression. On Windows you will need to use\n                        "/" instead of "\\" This corresponds to the\n                        "--testPathPattern" parameter in Jest\'s documentation.\n  --test-timeout-ms INTEGER\n                        Change the default timeout for tests; if a test\n                        doesn\'t complete within this many milliseconds, it\n                        will fail. Individual tests can override the default.\n                        If unspecified, the default is normally 5000 ms. This\n                        corresponds to the "--testTimeout" parameter in\n                        Jest\'s documentation. This parameter may\n                        alternatively be specified via the\n                        HEFT_JEST_TEST_TIMEOUT_MS environment variable.\n  -u, --update-snapshots\n                        Update Jest snapshots while running the tests. This\n                        corresponds to the "--updateSnapshots" parameter in\n                        Jest\n')))}d.isMDXComponent=!0}}]);